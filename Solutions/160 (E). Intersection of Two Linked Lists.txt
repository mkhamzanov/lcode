# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        dummyA = headA
        dummyB = headB
        
        if headA is None or headB is None:
            return None
        lenA = 0
        while headA is not None:
            lenA+=1
            headA = headA.next
        
        lenB = 0
        while headB is not None:
            lenB+=1
            headB = headB.next
        print(lenA,lenB)
        if lenA*lenB==0:
            return

        headA = dummyA
        headB = dummyB
        dA,dB = headA,headB
        if lenA>lenB:
            for _ in range(lenA-lenB):
                dA = dA.next
            while dA!=dB:
                dA = dA.next
                dB = dB.next
            else:
                return dA
        
        
        elif lenA < lenB:
            for _ in range(lenB-lenA):
                dB = dB.next
            while dA!=dB:
                dA = dA.next
                dB = dB.next
            else:
                return dA
        else:
            while dA!=dB:
                dA = dA.next
                dB = dB.next
            else:
                return dA
        
        return